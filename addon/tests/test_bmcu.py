from __future__ import annotations

import collections
from typing import Deque

import pytest

from addon.bmcu import BambuBusCodec, BambuPacket, crc8_dvb_s2, crc16_bambu

# Golden values for CRC checks, based on the current implementation.
# These tests will lock in the behavior and prevent regressions.
def test_crc8_dvb_s2():
    """Verify CRC8 DVB-S2 checksum against the actual implementation's output."""
    data = b"\x3d\xc5\x12\x00\x01\x11\x01"
    assert crc8_dvb_s2(data) == 0x30

def test_crc16_bambu():
    """Verify custom CRC16 checksum against the actual implementation's output."""
    data = b'\x3d\xc5\x08\x00\x01\x11\x01\x26' # Includes a valid CRC8
    assert crc16_bambu(data) == 0x535b


@pytest.fixture
def codec() -> BambuBusCodec:
    """Fixture for a BambuBusCodec with default addresses."""
    return BambuBusCodec(src_addr=0x01, dst_addr=0x11)


def test_encode_ping_packet(codec: BambuBusCodec):
    """Test encoding a simple short-frame 'ping' packet."""
    packet = codec.build_packet(command=0x01) # PING
    assert packet == b'\x3d\xc5\x08\x00\x01\x11\x01\x26\x5b\x53'

    # Check that sequence number increments
    packet2 = codec.build_packet(command=0x01)
    assert packet2 == b'\x3d\xc5\x08\x01\x01\x11\x01\x68\x00\x50'


def test_encode_select_gate_packet(codec: BambuBusCodec):
    """Test encoding a short-frame packet with a payload."""
    payload = b"\x00\x02\x00" # Select gate 2
    packet = codec.build_packet(command=0x03, payload=payload)
    assert packet == b'\x3d\xc5\x0b\x00\x01\x11\x03\x94\x00\x02\x00\xc7\xc6'


def test_encode_long_frame_packet(codec: BambuBusCodec):
    """Test encoding a packet that requires a long frame format."""
    payload = b"\x01" * 80
    packet = codec.build_packet(command=0xFF, payload=payload)
    expected = b'\x3d\xc5\x80\x59\x00\x01\x11\xff\xd1' + payload + b'\xcf\x34'
    assert packet == expected


def test_decode_simple_ack_packet():
    """Test decoding of a simple ACK response from the device."""
    # This frame must be generated by the current implementation to be valid.
    # We build a PING request (cmd=0x01) from device 0x11 to host 0x01
    # and expect an ACK (cmd=0x81) in return.
    codec = BambuBusCodec(src_addr=0x01, dst_addr=0x11)
    # Let's create what the device would send back: an ACK.
    # The device becomes the source (0x11), host is destination (0x01)
    ack_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    frame = ack_codec.build_packet(command=0x81) # ACK for command 0x01

    buffer: Deque[int] = collections.deque(frame)
    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 1
    packet = packets[0]
    assert packet.sequence == 0
    assert packet.src == 0x11
    assert packet.dst == 0x01
    assert packet.command == 0x81
    assert packet.payload == b""
    assert not packet.is_long
    assert not buffer


def test_decode_status_response_packet():
    """Test decoding a status response packet with a payload."""
    status_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    payload = b"\x00\x00\x00\x02\x00"
    frame = status_codec.build_packet(command=0x90, payload=payload)
    buffer: Deque[int] = collections.deque(frame)

    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 1
    packet = packets[0]
    assert packet.command == 0x90
    assert packet.payload == payload
    assert not buffer


def test_decode_stream_with_multiple_packets():
    """Test that multiple packets can be extracted from a single stream."""
    ack_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    frame1 = ack_codec.build_packet(command=0x81)
    frame2 = ack_codec.build_packet(command=0x90, payload=b'\x01')
    buffer: Deque[int] = collections.deque(frame1 + frame2)

    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 2
    assert packets[0].command == 0x81
    assert packets[1].command == 0x90
    assert not buffer


def test_decode_with_leading_garbage():
    """Test that the decoder syncs to the preamble, ignoring garbage data."""
    garbage = b"\x00\x01\x02\x03"
    ack_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    frame = ack_codec.build_packet(command=0x81)
    buffer: Deque[int] = collections.deque(garbage + frame)

    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 1
    assert packets[0].command == 0x81
    assert not buffer


def test_decode_invalid_crc8_is_rejected():
    """Test that a packet with an invalid header CRC is dropped."""
    ack_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    frame = bytearray(ack_codec.build_packet(command=0x81))
    frame[7] ^= 0xFF # Corrupt CRC8
    buffer: Deque[int] = collections.deque(frame)

    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 0


def test_decode_invalid_crc16_is_rejected():
    """Test that a packet with an invalid payload CRC is dropped."""
    ack_codec = BambuBusCodec(src_addr=0x11, dst_addr=0x01)
    frame = bytearray(ack_codec.build_packet(command=0x81))
    frame[-1] ^= 0xFF # Corrupt CRC16
    buffer: Deque[int] = collections.deque(frame)

    packets = BambuBusCodec.extract_packets(buffer)

    assert len(packets) == 0
