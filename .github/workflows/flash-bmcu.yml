name: Flash BMCU with version gate

on:
  workflow_dispatch:
    inputs:
      expected_final_version:
        description: "Version de firmware attendue (vide = utiliser la ref Git)"
        required: false
      allow_same_version:
        description: "Autoriser le reflash si la version ne change pas"
        type: boolean
        default: false
      firmware_path:
        description: "Chemin relatif vers le binaire firmware à flasher"
        required: false
        default: "klipper/out/klipper.bin"
  release:
    types: [published]

jobs:
  flash:
    name: Build and flash BMCU
    runs-on: ubuntu-latest
    env:
      BMC_HOST: ${{ secrets.BMC_HOST }}
      BMC_USER: ${{ secrets.BMC_USER || 'root' }}
      BMC_PASSWORD: ${{ secrets.BMC_PASSWORD }}
      EXPECTED_VERSION_INPUT: ${{ github.event.inputs.expected_final_version || '' }}
      ALLOW_SAME_VERSION_INPUT: ${{ github.event.inputs.allow_same_version || 'false' }}
      FIRMWARE_PATH_INPUT: ${{ github.event.inputs.firmware_path || 'klipper/out/klipper.bin' }}
      RELEASE_TAG: ${{ github.event.release.tag_name || '' }}
    steps:
      - name: Vérification des secrets requis
        run: |
          set -euo pipefail
          if [ -z "${BMC_HOST}" ]; then
            echo "::error::Le secret BMC_HOST est obligatoire" >&2
            exit 1
          fi
          if [ -z "${BMC_PASSWORD}" ]; then
            echo "::error::Le secret BMC_PASSWORD est obligatoire" >&2
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installer les dépendances système
        run: |
          sudo apt-get update
          sudo apt-get install -y ipmitool sshpass build-essential libncurses5-dev

      - name: Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Construire le firmware Klipper
        run: |
          set -euo pipefail
          firmware/build.sh

      - name: Déterminer le chemin du firmware
        id: firmware
        run: |
          set -euo pipefail
          path="${FIRMWARE_PATH_INPUT}"
          if [ ! -f "$path" ]; then
            echo "::error::Fichier firmware introuvable à l'emplacement '$path'" >&2
            exit 1
          fi
          sha=$(sha256sum "$path" | awk '{print $1}')
          echo "path=$path" >> "$GITHUB_OUTPUT"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Calculer la version attendue
        id: expected
        run: |
          set -euo pipefail
          manual="${EXPECTED_VERSION_INPUT}"
          tag="${RELEASE_TAG}"
          if [ -n "$manual" ]; then
            version="$manual"
          elif [ -n "$tag" ]; then
            version="$tag"
          else
            ref="${GITHUB_REF_NAME:-}"
            if [ -n "$ref" ]; then
              version="$ref"
            else
              echo "::error::Impossible de déterminer la version attendue (pas d'entrée ni de tag)." >&2
              exit 1
            fi
          fi
          echo "value=$version" >> "$GITHUB_OUTPUT"

      - name: Préparer les options de version
        id: flags
        run: |
          set -euo pipefail
          allow="${ALLOW_SAME_VERSION_INPUT,,}"
          if [ "$allow" = "true" ] || [ "$allow" = "1" ] || [ "$allow" = "yes" ]; then
            echo "allow=--allow-same-version" >> "$GITHUB_OUTPUT"
          fi

      - name: Flasher le BMCU
        run: |
          set -euo pipefail
          python3 firmware/flashBMCUtoKlipper_automation.py \
            --bmc-host "$BMC_HOST" \
            --bmc-user "$BMC_USER" \
            --bmc-password "$BMC_PASSWORD" \
            --firmware-file "${{ steps.firmware.outputs.path }}" \
            --firmware-sha256 "${{ steps.firmware.outputs.sha }}" \
            --expected-final-version "${{ steps.expected.outputs.value }}" \
            --log-root logs ${{ steps.flags.outputs.allow }}

      - name: Publier les journaux du flash
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bmcu-flash-logs
          path: logs
          if-no-files-found: ignore
